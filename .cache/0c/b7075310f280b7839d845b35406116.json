{"id":"../node_modules/fpl-api/dist/index.js","dependencies":[{"name":"/home/hogan/Desktop/personal_projex/own_website/node_modules/fpl-api/dist/index.js.map","includedInParent":true,"mtime":1661355453918},{"name":"/home/hogan/Desktop/personal_projex/own_website/node_modules/fpl-api/src/index.ts","includedInParent":true,"mtime":1661355453938},{"name":"/home/hogan/Desktop/personal_projex/own_website/package.json","includedInParent":true,"mtime":1661355765828},{"name":"/home/hogan/Desktop/personal_projex/own_website/node_modules/fpl-api/package.json","includedInParent":true,"mtime":1661355453902},{"name":"superagent","loc":{"line":43,"column":43,"index":3024},"parent":"/home/hogan/Desktop/personal_projex/own_website/node_modules/fpl-api/dist/index.js","resolved":"/home/hogan/Desktop/personal_projex/own_website/node_modules/fpl-api/node_modules/superagent/lib/client.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nexports.__esModule = true;\nexports.fetchClassicLeague = exports.fetchH2HLeagueStandings = exports.fetchH2HMatches = exports.fetchEntry = exports.fetchEntryHistory = exports.fetchLive = exports.fetchFixtures = exports.fetchEventStatus = exports.fetchEntryEvent = exports.fetchElementSummary = exports.fetchBootstrap = exports.EventStatusDayPoints = void 0;\nvar superagent_1 = __importDefault(require(\"superagent\"));\nvar EventStatusDayPoints;\n(function (EventStatusDayPoints) {\n    EventStatusDayPoints[\"LIVE\"] = \"l\";\n    EventStatusDayPoints[\"PROVISIONAL\"] = \"p\";\n    EventStatusDayPoints[\"CONFIRMED\"] = \"r\";\n})(EventStatusDayPoints = exports.EventStatusDayPoints || (exports.EventStatusDayPoints = {}));\n/**\n * General data such as players, teams, gameweeks, etc.\n */\nfunction fetchBootstrap() {\n    return __awaiter(this, void 0, void 0, function () {\n        var response;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, superagent_1[\"default\"].get(\"https://fantasy.premierleague.com/api/bootstrap-static/\")];\n                case 1:\n                    response = _a.sent();\n                    return [2 /*return*/, response.body];\n            }\n        });\n    });\n}\nexports.fetchBootstrap = fetchBootstrap;\n/**\n * Fetch data for a player.\n * @param elementId player id.\n */\nfunction fetchElementSummary(elementId) {\n    return __awaiter(this, void 0, void 0, function () {\n        var response, data;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, superagent_1[\"default\"].get(\"https://fantasy.premierleague.com/api/element-summary/\".concat(elementId, \"/\"))];\n                case 1:\n                    response = _a.sent();\n                    data = response.body;\n                    data.id = elementId;\n                    return [2 /*return*/, data];\n            }\n        });\n    });\n}\nexports.fetchElementSummary = fetchElementSummary;\n/**\n * Fetch entry event data (picks, transfers, etc.).\n * @param entryId ID of an entry team.\n * @param eventId ID of a gameweek.\n */\nfunction fetchEntryEvent(entryId, eventId) {\n    return __awaiter(this, void 0, void 0, function () {\n        var response;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, superagent_1[\"default\"].get(\"https://fantasy.premierleague.com/api/entry/\".concat(entryId, \"/event/\").concat(eventId, \"/picks/\"))];\n                case 1:\n                    response = _a.sent();\n                    return [2 /*return*/, response.body];\n            }\n        });\n    });\n}\nexports.fetchEntryEvent = fetchEntryEvent;\n/**\n * Fetch current event status.\n */\nfunction fetchEventStatus() {\n    return __awaiter(this, void 0, void 0, function () {\n        var response;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, superagent_1[\"default\"].get(\"https://fantasy.premierleague.com/api/event-status/\")];\n                case 1:\n                    response = _a.sent();\n                    return [2 /*return*/, response.body];\n            }\n        });\n    });\n}\nexports.fetchEventStatus = fetchEventStatus;\n/**\n * Fetch all fixtures or for a specific event.\n * @param eventId ID of a gameweek.\n */\nfunction fetchFixtures(eventId) {\n    return __awaiter(this, void 0, void 0, function () {\n        var query, response;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    query = eventId !== undefined ? \"?event=\" + eventId : \"\";\n                    return [4 /*yield*/, superagent_1[\"default\"].get(\"https://fantasy.premierleague.com/api/fixtures/\".concat(query))];\n                case 1:\n                    response = _a.sent();\n                    return [2 /*return*/, response.body];\n            }\n        });\n    });\n}\nexports.fetchFixtures = fetchFixtures;\n/**\n * Fetch live data for a gameweek.\n * @param eventId ID of a gameweek.\n */\nfunction fetchLive(eventId) {\n    return __awaiter(this, void 0, void 0, function () {\n        var response;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, superagent_1[\"default\"].get(\"https://fantasy.premierleague.com/api/event/\".concat(eventId, \"/live/\"))];\n                case 1:\n                    response = _a.sent();\n                    return [2 /*return*/, response.body];\n            }\n        });\n    });\n}\nexports.fetchLive = fetchLive;\n/**\n * Fetch an entrys history.\n * @param entryId ID of an entry team.\n */\nfunction fetchEntryHistory(entryId) {\n    return __awaiter(this, void 0, void 0, function () {\n        var response;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, superagent_1[\"default\"].get(\"https://fantasy.premierleague.com/api/entry/\".concat(entryId, \"/history/\"))];\n                case 1:\n                    response = _a.sent();\n                    return [2 /*return*/, response.body];\n            }\n        });\n    });\n}\nexports.fetchEntryHistory = fetchEntryHistory;\n/**\n * Fetch an entry.\n * @param entryId ID of an entry team.\n */\nfunction fetchEntry(entryId) {\n    return __awaiter(this, void 0, void 0, function () {\n        var response;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, superagent_1[\"default\"].get(\"https://fantasy.premierleague.com/api/entry/\".concat(entryId, \"/\"))];\n                case 1:\n                    response = _a.sent();\n                    return [2 /*return*/, response.body];\n            }\n        });\n    });\n}\nexports.fetchEntry = fetchEntry;\n/**\n * Fetch an entrys matches from a H2H league.\n * @param leagueId ID of the H2H league.\n * @param entryId ID of the entry whos matches should be fetched.\n * @param page Page number to fetch.\n */\nfunction fetchH2HMatches(leagueId, entryId, page) {\n    if (page === void 0) { page = 1; }\n    return __awaiter(this, void 0, void 0, function () {\n        var response;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, superagent_1[\"default\"].get(\"https://fantasy.premierleague.com/api/leagues-h2h-matches/league/\".concat(leagueId, \"/?page=\").concat(page, \"&entry=\").concat(entryId))];\n                case 1:\n                    response = _a.sent();\n                    return [2 /*return*/, response.body];\n            }\n        });\n    });\n}\nexports.fetchH2HMatches = fetchH2HMatches;\n/**\n * Fetch H2H league standings page.\n * @param leagueId ID of a H2H league.\n * @param options Page options.\n * @param options.pageStandings Page number of standings.\n * @param options.pageNewEntries Page number of new entries.\n */\nfunction fetchH2HLeagueStandings(leagueId, _a) {\n    var _b = _a === void 0 ? {\n        pageStandings: 1,\n        pageNewEntries: 1\n    } : _a, pageStandings = _b.pageStandings, pageNewEntries = _b.pageNewEntries;\n    return __awaiter(this, void 0, void 0, function () {\n        var response;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0: return [4 /*yield*/, superagent_1[\"default\"].get(\"https://fantasy.premierleague.com/api/leagues-h2h/\".concat(leagueId, \"/standings/?page_new_entries=\").concat(pageNewEntries, \"&page_standings=\").concat(pageStandings))];\n                case 1:\n                    response = _c.sent();\n                    return [2 /*return*/, response.body];\n            }\n        });\n    });\n}\nexports.fetchH2HLeagueStandings = fetchH2HLeagueStandings;\n/**\n * Fetch classic league standings page.\n * @param leagueId ID of a classic league.\n * @param options Page options.\n * @param options.pageStandings Page number of standings.\n * @param options.pageNewEntries Page number of new entries.\n * @param options.phase Phase ID.\n */\nfunction fetchClassicLeague(leagueId, _a) {\n    var _b = _a === void 0 ? {\n        pageStandings: 1,\n        pageNewEntries: 1,\n        phase: 1\n    } : _a, pageStandings = _b.pageStandings, pageNewEntries = _b.pageNewEntries, phase = _b.phase;\n    return __awaiter(this, void 0, void 0, function () {\n        var response;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0: return [4 /*yield*/, superagent_1[\"default\"].get(\"https://fantasy.premierleague.com/api/leagues-classic/\".concat(leagueId, \"/standings/?page_new_entries=\").concat(pageNewEntries, \"&page_standings=\").concat(pageStandings, \"&phase=\").concat(phase))];\n                case 1:\n                    response = _c.sent();\n                    return [2 /*return*/, response.body];\n            }\n        });\n    });\n}\nexports.fetchClassicLeague = fetchClassicLeague;\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import superagent from \"superagent\";\n\nexport type ElementStatus = \"a\" | \"u\" | \"i\" | \"s\" | \"n\" | \"d\";\n\nexport type ChipName = \"bboost\" | \"3xc\" | \"freehit\" | \"wildcard\";\n\nexport type LeagueType = \"x\" | \"s\";\n\nexport type StatIdentifier =\n  | \"minutes\"\n  | \"goals_scored\"\n  | \"assists\"\n  | \"clean_sheets\"\n  | \"goals_conceded\"\n  | \"own_goals\"\n  | \"penalties_saved\"\n  | \"penalties_missed\"\n  | \"yellow_cards\"\n  | \"red_cards\"\n  | \"saves\"\n  | \"bonus\"\n  | \"bps\";\n\nexport interface ElementStats {\n  label: string;\n  name: string;\n}\n\nexport interface ElementTypes {\n  id: number;\n  plural_name: string;\n  plural_name_short: string;\n  singular_name: string;\n  singular_name_short: string;\n  squad_max_play: number;\n  squad_min_play: number;\n  squad_select: number;\n  sub_positions_locked: number[];\n  ui_shirt_specific: boolean;\n  element_count: number;\n}\n\nexport interface Element {\n  assists: number;\n  bonus: number;\n  bps: number;\n  chance_of_playing_next_round: number | null;\n  chance_of_playing_this_round: number | null;\n  clean_sheets: number;\n  code: number;\n  corners_and_indirect_freekicks_order: number | null;\n  corners_and_indirect_freekicks_text: string;\n  cost_change_event_fall: number;\n  cost_change_event: number;\n  cost_change_start_fall: number;\n  cost_change_start: number;\n  creativity: string;\n  creativity_rank_type: number | null;\n  creativity_rank: number | null;\n  direct_freekicks_order: number | null;\n  direct_freekicks_text: string;\n  dreamteam_count: number;\n  element_type: number;\n  ep_next: string | null;\n  ep_this: string | null;\n  event_points: number;\n  first_name: string;\n  form: string;\n  goals_conceded: number;\n  goals_scored: number;\n  ict_index: string;\n  ict_index_rank_type: number | null;\n  ict_index_rank: number | null;\n  id: number;\n  in_dreamteam: boolean;\n  influence: string;\n  influence_rank_type: number | null;\n  influence_rank: number | null;\n  minutes: number;\n  news_added: string | null;\n  news: string;\n  now_cost: number;\n  own_goals: number;\n  penalties_missed: number;\n  penalties_order: number | null;\n  penalties_saved: number;\n  penalties_text: string;\n  photo: string;\n  points_per_game: string;\n  red_cards: number;\n  saves: number;\n  second_name: string;\n  selected_by_percent: string;\n  special: boolean;\n  squad_number: number | null;\n  status: ElementStatus;\n  team_code: number;\n  team: number;\n  threat: string;\n  threat_rank_type: number | null;\n  threat_rank: number | null;\n  total_points: number;\n  transfers_in_event: number;\n  transfers_in: number;\n  transfers_out_event: number;\n  transfers_out: number;\n  value_form: string;\n  value_season: string;\n  web_name: string;\n  yellow_cards: number;\n}\n\ninterface EntryLeagueInfo {\n  id: number;\n  cup_league: null;\n  cup_qualified: boolean | null;\n  has_cup: boolean;\n  name: string;\n  short_name: string | null;\n  created: string;\n  closed: boolean;\n  rank: null | number;\n  max_entries: null | number;\n  league_type: LeagueType;\n  admin_entry: null | number;\n  start_event: number;\n  entry_rank: number;\n  entry_last_rank: number;\n  entry_can_leave: boolean;\n  entry_can_admin: boolean;\n  entry_can_invite: boolean;\n}\n\nexport interface EntryClassicLeague extends EntryLeagueInfo {\n  scoring: \"c\";\n}\n\nexport interface EntryH2HLeague extends EntryLeagueInfo {\n  scoring: \"h\";\n}\n\nexport interface CupMatch {\n  id: number;\n  entry_1_entry: number;\n  entry_1_name: string;\n  entry_1_player_name: string;\n  entry_1_points: number;\n  entry_1_win: number;\n  entry_1_draw: number;\n  entry_1_loss: number;\n  entry_1_total: number;\n  entry_2_entry: number;\n  entry_2_name: string;\n  entry_2_player_name: string;\n  entry_2_points: number;\n  entry_2_win: number;\n  entry_2_draw: number;\n  entry_2_loss: number;\n  entry_2_total: number;\n  is_knockout: boolean;\n  winner: number;\n  seed_value: null;\n  event: number;\n  tiebreak: null;\n}\n\nexport interface EntryCupStatus {\n  qualification_event: number | null;\n  qualification_numbers: number | null;\n  qualification_rank: number | null;\n  qualification_state: \"QUALIFIED\" | \"NOT_QUALIFIED_RANK\" | null;\n}\n\nexport interface EntryCup {\n  cup_league: null;\n  matches: CupMatch[];\n  status: EntryCupStatus;\n}\n\nexport interface EntryLeagues {\n  classic: EntryClassicLeague[];\n  h2h: EntryH2HLeague[];\n  cup: EntryCup;\n  cup_matches: never[];\n}\n\nexport interface Entry {\n  id: number;\n  joined_time: string;\n  started_event: number;\n  favourite_team: number;\n  player_first_name: string;\n  player_last_name: string;\n  player_region_id: number;\n  player_region_name: string;\n  player_region_iso_code_short: string;\n  player_region_iso_code_long: string;\n  summary_overall_points: number | null;\n  summary_overall_rank: number | null;\n  summary_event_points: number | null;\n  summary_event_rank: number | null;\n  current_event: number | null;\n  leagues: EntryLeagues;\n  name: string;\n  kit: null | string;\n  name_change_blocked: boolean;\n  last_deadline_bank: number | null;\n  last_deadline_value: number | null;\n  last_deadline_total_transfers: number;\n}\n\nexport interface EntryChipPlay {\n  event: number;\n  name: ChipName;\n  time: string;\n}\n\nexport interface EventChipPlay {\n  chip_name: ChipName;\n  num_played: number;\n}\n\nexport interface TopElementInfo {\n  id: number;\n  points: number;\n}\n\nexport interface Event {\n  average_entry_score: number;\n  chip_plays: EventChipPlay[];\n  data_checked: boolean;\n  deadline_time: string;\n  deadline_time_epoch: number;\n  deadline_time_game_offset: number;\n  finished: boolean;\n  highest_score: number | null;\n  highest_scoring_entry: number | null;\n  id: number;\n  is_current: boolean;\n  is_next: boolean;\n  is_previous: boolean;\n  most_captained: number | null;\n  most_selected: number | null;\n  most_transferred_in: number | null;\n  most_vice_captained: number | null;\n  name: string;\n  top_element: number | null;\n  top_element_info: TopElementInfo | null;\n  transfers_made: number;\n  cup_leagues_created: boolean;\n  h2h_ko_matches_created: boolean;\n}\n\nexport interface GameSettings {\n  cup_start_event_id: number | null;\n  league_join_private_max: number;\n  league_join_public_max: number;\n  league_max_ko_rounds_private_h2h: number;\n  league_max_size_private_h2h: number;\n  league_max_size_public_classic: number;\n  league_max_size_public_h2h: number;\n  league_points_h2h_draw: number;\n  league_points_h2h_lose: number;\n  league_points_h2h_win: number;\n  league_prefix_public: string;\n  squad_squadplay: number;\n  squad_squadsize: number;\n  squad_team_limit: number;\n  squad_total_spend: number;\n  stats_form_days: number;\n  sys_vice_captain_enabled: boolean;\n  timezone: string;\n  transfers_sell_on_fee: number;\n  ui_currency_multiplier: number;\n  ui_special_shirt_exclusions: any[];\n  ui_use_special_shirts: boolean;\n  league_h2h_tiebreak_stats: [\"+goals_scored\", \"-goals_conceded\"];\n  transfers_cap: number;\n  cup_qualifying_method: null;\n  cup_stop_event_id: number | null;\n  cup_type: null;\n  league_ko_first_instead_of_random: boolean;\n}\n\nexport interface Phase {\n  id: number;\n  name: string;\n  start_event: number;\n  stop_event: number;\n}\n\nexport interface Team {\n  code: number;\n  draw: number;\n  form: string | null;\n  id: number;\n  loss: number;\n  name: string;\n  played: number;\n  points: number;\n  position: number;\n  pulse_id: number;\n  short_name: string;\n  strength: number;\n  strength_attack_away: number;\n  strength_attack_home: number;\n  strength_defence_away: number;\n  strength_defence_home: number;\n  strength_overall_away: number;\n  strength_overall_home: number;\n  team_division: null;\n  unavailable: boolean;\n  win: number;\n}\n\nexport interface Bootstrap {\n  element_stats: ElementStats[];\n  element_types: ElementTypes[];\n  elements: Element[];\n  events: Event[];\n  game_settings: GameSettings;\n  phases: Phase[];\n  teams: Team[];\n  total_players: number;\n}\n\nexport interface LiveElementStats {\n  minutes: number;\n  goals_scored: number;\n  assists: number;\n  clean_sheets: number;\n  goals_conceded: number;\n  own_goals: number;\n  penalties_saved: number;\n  penalties_missed: number;\n  yellow_cards: number;\n  red_cards: number;\n  saves: number;\n  bonus: number;\n  bps: number;\n  influence: string;\n  creativity: string;\n  threat: string;\n  ict_index: string;\n  total_points: number;\n  in_dreamteam: boolean;\n}\n\nexport interface LiveElementExplainStat {\n  [key: string]: any;\n  identifier: StatIdentifier;\n  points: number;\n  value: number;\n}\n\nexport interface LiveElementExplain {\n  fixture: number;\n  stats: LiveElementExplainStat[];\n}\n\nexport interface LiveElement {\n  id: number;\n  stats: LiveElementStats;\n  explain: LiveElementExplain[];\n}\n\nexport interface Live {\n  elements: LiveElement[];\n}\n\nexport interface ElementSummaryUpcomingFixture {\n  code: number;\n  difficulty: number;\n  event: number;\n  event_name: string;\n  finished: boolean;\n  id: number;\n  is_home: boolean;\n  kickoff_time: string;\n  minutes: number;\n  provisional_start_time: boolean;\n  team_a: number;\n  team_a_score: number | null;\n  team_h: number;\n  team_h_score: number | null;\n}\n\nexport interface ElementSummaryFixture {\n  assists: number;\n  bonus: number;\n  bps: number;\n  clean_sheets: number;\n  creativity: string;\n  element: number;\n  fixture: number;\n  goals_conceded: number;\n  goals_scored: number;\n  ict_index: string;\n  influence: string;\n  kickoff_time: string;\n  minutes: number;\n  opponent_team: number;\n  own_goals: number;\n  penalties_missed: number;\n  penalties_saved: number;\n  red_cards: number;\n  round: number;\n  saves: number;\n  selected: number;\n  team_a_score: number;\n  team_h_score: number;\n  threat: string;\n  total_points: number;\n  transfers_balance: number;\n  transfers_in: number;\n  transfers_out: number;\n  value: number;\n  was_home: boolean;\n  yellow_cards: number;\n}\n\nexport interface ElementSummarySeason {\n  assists: number;\n  bonus: number;\n  bps: number;\n  clean_sheets: number;\n  creativity: string;\n  element_code: number;\n  end_cost: number;\n  goals_conceded: number;\n  goals_scored: number;\n  ict_index: string;\n  influence: string;\n  minutes: number;\n  own_goals: number;\n  penalties_missed: number;\n  penalties_saved: number;\n  red_cards: number;\n  saves: number;\n  season_name: string;\n  start_cost: number;\n  threat: string;\n  total_points: number;\n  yellow_cards: number;\n}\n\nexport interface ElementSummary {\n  id: number;\n  fixtures: ElementSummaryUpcomingFixture[];\n  history: ElementSummaryFixture[];\n  history_past: ElementSummarySeason[];\n}\n\nexport interface FixtureStatMap {\n  value: number;\n  element: number;\n}\n\nexport interface FixtureStat {\n  identifier: StatIdentifier;\n  a: FixtureStatMap[];\n  h: FixtureStatMap[];\n}\n\nexport interface Fixture {\n  code: number;\n  event: number;\n  finished: boolean;\n  finished_provisional: boolean;\n  id: number;\n  kickoff_time: string;\n  minutes: number;\n  provisional_start_time: boolean;\n  pulse_id: number;\n  started: boolean;\n  team_a: number;\n  team_a_score: number | null;\n  team_h: number;\n  team_h_score: number | null;\n  stats: FixtureStat[];\n  team_h_difficulty: number;\n  team_a_difficulty: number;\n}\n\nexport enum EventStatusDayPoints {\n  LIVE = \"l\",\n  PROVISIONAL = \"p\",\n  CONFIRMED = \"r\",\n}\n\nexport interface EventStatusDay {\n  bonus_added: boolean;\n  date: string;\n  event: number;\n  points: EventStatusDayPoints;\n}\n\nexport interface EventStatus {\n  status: EventStatusDay[];\n  leagues: string;\n}\n\nexport interface EntrySeasonHistory {\n  rank: number;\n  season_name: string;\n  total_points: number;\n}\n\nexport interface EntryHistory {\n  chips: EntryChipPlay[];\n  current: EntryEventHistory[];\n  past: EntrySeasonHistory[];\n}\n\nexport interface EntryEventHistory {\n  bank: number;\n  event: number;\n  event_transfers: number;\n  event_transfers_cost: number;\n  overall_rank: number;\n  points: number;\n  points_on_bench: number;\n  rank: number;\n  rank_sort: number;\n  total_points: number;\n  value: number;\n}\n\nexport interface EntryEventPick {\n  element: number;\n  is_captain: boolean;\n  is_vice_captain: boolean;\n  multiplier: number;\n  position: number;\n}\n\nexport interface EntryEvent {\n  active_chip: ChipName | null;\n  automatic_subs: any[];\n  entry_history: EntryEventHistory;\n  picks: EntryEventPick[];\n}\n\nexport interface Me {\n  player: Player;\n  watched: number[];\n}\n\nexport interface Player {\n  date_of_birth: string;\n  dirty: boolean;\n  email: string;\n  entry: number;\n  first_name: string;\n  gender: string;\n  id: number;\n  last_name: string;\n  region: number;\n}\n\nexport interface MyTeamPick {\n  element: number;\n  position: number;\n  selling_price: number;\n  multiplier: number;\n  purchase_price: number;\n  is_captain: boolean;\n  is_vice_captain: boolean;\n}\n\nexport interface MyTeamChip {\n  status_for_entry: \"played\" | \"available\";\n  played_by_entry: number[];\n  name: ChipName;\n  number: number;\n  start_event: number;\n  stop_event: number;\n  chip_type: \"transfer\" | \"team\";\n}\n\nexport interface MyTeamTransfers {\n  cost: number;\n  status: \"cost\";\n  limit: number;\n  made: number;\n  bank: number;\n  value: number;\n}\n\nexport interface MyTeam {\n  picks: MyTeamPick[];\n  chips: MyTeamChip[];\n  transfers: MyTeamTransfers;\n}\n\nexport interface ClassicLeague {\n  league: ClassicLeagueInfo;\n  new_entries: NewLeagueEntry[];\n  standings: ClassicLeagueStandings;\n}\n\nexport interface ClassicLeagueInfo extends LeagueInfo {\n  scoring: \"c\";\n}\n\nexport interface H2HLeague {\n  league: H2HLeagueInfo;\n  new_entries: NewLeagueEntry[];\n  standings: H2HLeagueStandings;\n}\n\nexport interface H2HLeagueInfo extends LeagueInfo {\n  scoring: \"h\";\n  ko_rounds: number | null;\n}\n\ninterface LeagueInfo {\n  admin_entry: number | null;\n  closed: boolean;\n  code_privacy: \"p\";\n  created: string;\n  id: number;\n  league_type: LeagueType;\n  max_entries: number | null;\n  name: string;\n  rank: null;\n  start_event: number;\n}\n\nexport interface NewLeagueEntry {\n  entry: number;\n  entry_name: string;\n  joined_time: string;\n  player_first_name: string;\n  player_last_name: string;\n}\n\ninterface LeagueEntry {\n  entry: number;\n  entry_name: string;\n  id: number;\n  last_rank: number;\n  player_name: string;\n  rank: number;\n  rank_sort: number;\n  total: number;\n}\n\nexport interface ClassicLeagueEntry extends LeagueEntry {\n  event_total: number;\n}\n\nexport interface H2HLeagueEntry extends LeagueEntry {\n  division: 182514;\n  matches_drawn: 0;\n  matches_lost: 5;\n  matches_played: 16;\n  matches_won: 11;\n  points_for: 872;\n}\n\ninterface LeagueStandings {\n  has_next: boolean;\n  page: number;\n}\n\nexport interface ClassicLeagueStandings extends LeagueStandings {\n  results: ClassicLeagueEntry[];\n}\n\nexport interface H2HLeagueStandings extends LeagueStandings {\n  results: H2HLeagueEntry[];\n}\n\nexport interface H2HMatch {\n  entry_1_draw: number;\n  entry_1_entry: number;\n  entry_1_loss: number;\n  entry_1_name: string;\n  entry_1_player_name: string;\n  entry_1_points: number;\n  entry_1_total: number;\n  entry_1_win: number;\n  entry_2_draw: number;\n  entry_2_entry: number;\n  entry_2_loss: number;\n  entry_2_name: string;\n  entry_2_player_name: string;\n  entry_2_points: number;\n  entry_2_total: number;\n  entry_2_win: number;\n  event: number;\n  id: number;\n  is_knockout: boolean;\n  seed_value: null;\n  tiebreak: null;\n  winner: null;\n}\n\nexport interface H2HLeagueMatches {\n  has_next: boolean;\n  page: number;\n  results: H2HMatch[];\n}\n\n/**\n * General data such as players, teams, gameweeks, etc.\n */\nexport async function fetchBootstrap(): Promise<Bootstrap> {\n  const response = await superagent.get(\n    \"https://fantasy.premierleague.com/api/bootstrap-static/\"\n  );\n\n  return response.body;\n}\n\n/**\n * Fetch data for a player.\n * @param elementId player id.\n */\nexport async function fetchElementSummary(\n  elementId: number\n): Promise<ElementSummary> {\n  const response = await superagent.get(\n    `https://fantasy.premierleague.com/api/element-summary/${elementId}/`\n  );\n  const data = response.body;\n\n  data.id = elementId;\n\n  return data;\n}\n\n/**\n * Fetch entry event data (picks, transfers, etc.).\n * @param entryId ID of an entry team.\n * @param eventId ID of a gameweek.\n */\nexport async function fetchEntryEvent(\n  entryId: number,\n  eventId: number\n): Promise<EntryEvent> {\n  const response = await superagent.get(\n    `https://fantasy.premierleague.com/api/entry/${entryId}/event/${eventId}/picks/`\n  );\n\n  return response.body;\n}\n\n/**\n * Fetch current event status.\n */\nexport async function fetchEventStatus(): Promise<EventStatus> {\n  const response = await superagent.get(\n    \"https://fantasy.premierleague.com/api/event-status/\"\n  );\n\n  return response.body;\n}\n\n/**\n * Fetch all fixtures or for a specific event.\n * @param eventId ID of a gameweek.\n */\nexport async function fetchFixtures(eventId?: number): Promise<Fixture[]> {\n  const query = eventId !== undefined ? \"?event=\" + eventId : \"\";\n\n  const response = await superagent.get(\n    `https://fantasy.premierleague.com/api/fixtures/${query}`\n  );\n\n  return response.body;\n}\n\n/**\n * Fetch live data for a gameweek.\n * @param eventId ID of a gameweek.\n */\nexport async function fetchLive(eventId: number): Promise<Live> {\n  const response = await superagent.get(\n    `https://fantasy.premierleague.com/api/event/${eventId}/live/`\n  );\n\n  return response.body;\n}\n\n/**\n * Fetch an entrys history.\n * @param entryId ID of an entry team.\n */\nexport async function fetchEntryHistory(\n  entryId: number\n): Promise<EntryHistory> {\n  const response = await superagent.get(\n    `https://fantasy.premierleague.com/api/entry/${entryId}/history/`\n  );\n\n  return response.body;\n}\n\n/**\n * Fetch an entry.\n * @param entryId ID of an entry team.\n */\nexport async function fetchEntry(entryId: number): Promise<Entry> {\n  const response = await superagent.get(\n    `https://fantasy.premierleague.com/api/entry/${entryId}/`\n  );\n\n  return response.body;\n}\n\n/**\n * Fetch an entrys matches from a H2H league.\n * @param leagueId ID of the H2H league.\n * @param entryId ID of the entry whos matches should be fetched.\n * @param page Page number to fetch.\n */\nexport async function fetchH2HMatches(\n  leagueId: number,\n  entryId: number,\n  page: number = 1\n): Promise<H2HLeagueMatches> {\n  const response = await superagent.get(\n    `https://fantasy.premierleague.com/api/leagues-h2h-matches/league/${leagueId}/?page=${page}&entry=${entryId}`\n  );\n\n  return response.body;\n}\n\n/**\n * Fetch H2H league standings page.\n * @param leagueId ID of a H2H league.\n * @param options Page options.\n * @param options.pageStandings Page number of standings.\n * @param options.pageNewEntries Page number of new entries.\n */\nexport async function fetchH2HLeagueStandings(\n  leagueId: number,\n  { pageStandings, pageNewEntries } = {\n    pageStandings: 1,\n    pageNewEntries: 1,\n  }\n): Promise<H2HLeague> {\n  const response = await superagent.get(\n    `https://fantasy.premierleague.com/api/leagues-h2h/${leagueId}/standings/?page_new_entries=${pageNewEntries}&page_standings=${pageStandings}`\n  );\n\n  return response.body;\n}\n\n/**\n * Fetch classic league standings page.\n * @param leagueId ID of a classic league.\n * @param options Page options.\n * @param options.pageStandings Page number of standings.\n * @param options.pageNewEntries Page number of new entries.\n * @param options.phase Phase ID.\n */\nexport async function fetchClassicLeague(\n  leagueId: number,\n  { pageStandings, pageNewEntries, phase } = {\n    pageStandings: 1,\n    pageNewEntries: 1,\n    phase: 1,\n  }\n): Promise<ClassicLeague> {\n  const response = await superagent.get(\n    `https://fantasy.premierleague.com/api/leagues-classic/${leagueId}/standings/?page_new_entries=${pageNewEntries}&page_standings=${pageStandings}&phase=${phase}`\n  );\n\n  return response.body;\n}\n"]}},"error":null,"hash":"1f83c913264b56c22040a93a47cfc4a3","cacheData":{"env":{}}}